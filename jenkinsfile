node {
 try  {
  notify('Job Started') 
  
  environment {
    registry = "charan253/capstoneproject"
    registryCredential = 'charan-dockerhub'
  }

     
  stage('Git-Checkout') {
   git 'https://github.com/SaiCharanUppari/dockerrepo.git'
  }

    
  stage('Download package from JFrog') {
            def server= Artifactory.server 'Artifactory'
            def downloadSpec = """{
            "files": [
            {
                "pattern": "capstoneproject/CapStoneProject-0.0.1-SNAPSHOT.war",
                "target": "./capstoneproject.war"
            }
            ]
            }"""
        server.download(downloadSpec)
    }
       
 stage('Docker-Stage-Deployment') {
   sh label: '', script: 'docker-compose up -d --build'
  }
  
  stage('Pushing DockerImage to DockerHub') {
	  docker.withRegistry('', 'charan-dockerhub' ) {
		    sh label: '', script: 'docker push charan253/capstoneproject:$BUILD_NUMBER'
		  }
   
  }
  
  stage('Production - Provisioning Approval') {
  	input "Start provisioning the production server?"
  }
  stage('Downstream Build -- Docker Deployment'){
	 build 'pipe-Terraform'
	}
 notify('Job Completed')   
} catch (err) {
  notify("Error ${err}")
  currentBuild.result = 'FAILURE'
}

}

def notify(status){
    emailext (
	to: "natammegasachin369@gmail.com",
	subject: "${status}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
	 body: """<p>${status}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
	<p>Check console output at <a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a></p>""",
		)
	}
